<h1 align="center">
<strong>9. Validating Block Structure part Two</strong><br>
</h1>

목표: 블록의 해쉬를 알아보아요

_method) getHashforBlock_

```typescript
const getHashforBlock = (aBlock: Block): string =>
  Block.calculateBlockHash(
    aBlock.index,
    aBlock.previousHash,
    aBlock.timestamp,
    aBlock.data
  );
```

- 아무 블록 가져옴

_method) isBlockValid_

- 블록은 candidate블록
- if else) 우리가 얻은 해쉬가 candidate블록의 해쉬와 같지않으면<br>
  return false => 구조는 유효하지 않다

```typescript
const isBlockValid = (candidateBlock: Block, previousBlock: Block): boolean => {
  if (!Block.validateStructure(candidateBlock)) {
    return false;
  } else if (previousBlock.index + 1 !== candidateBlock.index) {
    return false;
  } else if (previousBlock.hash !== candidateBlock.previousHash) {
    return false;
  } else if (getHashforBlock(candidateBlock) !== candidateBlock.hash) {
    return false;
  } else {
    return true;
  }
};
```

=> 블록이 유효하면,<br>
=> 구조를 검증<br>
=> 유효하지 않으면 거짓.<br>
=> 이전 블록의 index + 1이 candidate index와 같지 않다면 거짓.<br>
=> 이전 블록의 hash가 candidate previous hash와 같지 않다면 거짓.<br>
=> 해쉬를 계산했는데, 다른 해쉬를 가지고 있다면 거짓.

_method) addBlock_

```typescript
const addBlock = (candidateBlock: Block): void => {
  if (isBlockValid(candidateBlock, getLatesBlock())) {
    blockchain.push(candidateBlock);
  }
};
```

- 블록체인에 블록 추가
- 아무것도 리턴하지 않음
- if) method) isBlockValid가 참이라면 블록을 push
